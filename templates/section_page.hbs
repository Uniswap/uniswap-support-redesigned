
<div class="SectionPage flex flex-row bg-light-surface-1 dark:bg-dark-surface-1">
  <div id="new-side-nav" class="min-w-[15rem] max-w-[15rem] hidden md:block relative mt-nav-h"></div>
  <div class="page-wrapper">
    <div class="section-container">
      <div id="new-section-breadcrumbs"></div>
      <div class="default-grid">
        <h1 class="col-span-full text-light-neutral-1 dark:text-dark-neutral-1 heading-1">{{section.name}}</h1>
        <div class="col-span-full">
          {{#if section.articles}}
            <ul class="col-span-full default-grid mt-5">
              {{#each section.articles}}
                <li class="article-list-item {{#if internal}}hidden{{/if}}">
                  <a href="{{url}}" class="article-list-link group transition flex flex-col h-full bg-light-surface-2 dark:bg-dark-surface-2 hover:bg-light-accent-2 hover:dark:bg-dark-accent-2 px-gap-large py-gap-medium rounded-medium w-full">
                    <h3 class="subheading-2 transition text-light-neutral-1 dark:text-dark-neutral-1 group-hover:text-light-accent-1 group-hover:dark:text-dark-accent-1">{{title}}</h3>
                    <p class="body-3 text-light-neutral-2 dark:text-dark-neutral-2">{{snippet}}</p>
                  </a>
                </li>
              {{/each}}
            </ul>
          {{else}}
            <i class="section-empty">
              <a href="{{section.url}}">{{t 'empty'}}</a>
            </i>
          {{/if}}
          {{!-- cannot find any article that needs pagination, we might need to add style on this in the future as app grows --}}
          {{pagination "section.articles"}}
        </div>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { renderSectionBreadcrumbs } from "section-page";

  const container = document.getElementById("new-section-breadcrumbs");

  const settings = {{json settings}};

  const sectionPageData = {
    section: {{json section}}
  }

  // Make sure arguments are correctly typed. 
  renderSectionBreadcrumbs(settings, sectionPageData, container);
</script>

<script type="module">
  import { renderSideNav, sideNav } from "side-nav";

  const container = document.getElementById("new-side-nav");

  const settings = {{json settings}};

  const sideNavData = await sideNav.get();

  const section = {{json section}};
  const pathSteps = section.articles[0].path_steps;
  const pathnames = pathSteps.map((path) => {
    const urlObj = new URL(path.url);
    return urlObj.pathname;
  });
  const navState = pathnames.reduce((state, pathname) => {
    if (pathname.includes('categories')) {
      const category = pathname.split('/').pop().split('-')[0];
      state.category = parseInt(category);
    } else if (pathname.includes('sections')) {
      const section = pathname.split('/').pop().split('-')[0];
      state.section = parseInt(section);
    }

    return state;
  }, {})

  // Make sure arguments are correctly typed. 
  renderSideNav(settings, sideNavData, navState, container);
</script>