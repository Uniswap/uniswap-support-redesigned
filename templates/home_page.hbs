<div class="Homepage flex flex-row bg-light-surface-1 dark:bg-dark-surface-1">
  <div id="new-side-nav" class="min-w-[15rem] max-w-[15rem] hidden md:block relative mt-nav-h"></div>
  <div id="new-homepage">
    <div id="search-bar-placeholder-mobile" class="z-search w-full pointer-events-none md:hidden mt-8 opacity-0">
      <div class="m-auto flex flex-row space-x-2 p-3 rounded-[1.25rem] bg-light-surface-3 dark:!bg-dark-surface-3 items-center !pointer-events-auto !mt-4 border border-transparent focus-within:!border-light-surface-3 focus-within:dark:!border-dark-surface-3 focus-within:!bg-transparent focus-within:!text-light-neutral-1 focus-within:dark:!text-dark-neutral-1">
        <h2 class="sr-only">{{ t 'search' }}</h2>
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none" class="shrink-0">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M9.16675 1.66699C5.02461 1.66699 1.66675 5.02486 1.66675 9.16699C1.66675 13.3091 5.02461 16.667 9.16675 16.667C10.9388 16.667 12.5673 16.0524 13.8508 15.0248L17.1126 18.2913C17.4378 18.617 17.9654 18.6174 18.2911 18.2922C18.6168 17.967 18.6172 17.4394 18.292 17.1137L15.0288 13.8458C16.0539 12.5631 16.6667 10.9366 16.6667 9.16699C16.6667 5.02486 13.3089 1.66699 9.16675 1.66699ZM9.16675 3.33366C5.94509 3.33366 3.33341 5.94533 3.33341 9.16699C3.33341 12.3887 5.94509 15.0003 9.16675 15.0003C12.3884 15.0003 15.0001 12.3887 15.0001 9.16699C15.0001 5.94533 12.3884 3.33366 9.16675 3.33366Z" fill="#6B6B6B"/>
        </svg>
        {{search submit=false instant=settings.instant_search class='search search-full'}}
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { renderHomepage } from "homepage";

  const container = document.getElementById("new-homepage");
  const searchBarPlaceholder = document.getElementById("search-bar-placeholder-mobile");

  const settings = {{json settings}};
  // Handles data for the homepage. If you would like to update any data within homepage, adjust it here.
  const homepageData = {
    heros: [{
      headerLine1: 'Need help?',
      headerLine2: 'We got you.',
    }, {
      headerLine1: 'No problem too big.',
      headerLine2: 'We’re here to help.',
    }],
    coloredCardsBlock: {
      cards: [
        {
          icon: 'graduationCap', 
          title: 'Read FAQs',
          description: 'Get more information on basic terms and how the Uniswap app works',
          color: 'pink',
          url: '/hc/en-us/requests/new',
        },
        {
          icon: 'lightbulb', 
          title: 'How to use Uniswap',
          description: 'Get more information on basic terms and how the Uniswap web app works',
          color: 'green',
          url: '/hc/en-us/requests/new',
        },
        {
          icon: 'helpCircle', 
          title: 'Troubleshoot an issue',
          description: 'Explore our guides for help troubleshooting issues',
          color: 'blue',
          url: '/hc/en-us/requests/new',
        },
        {
          icon: 'messageQuestion', 
          title: 'Submit a Request',
          description: 'If you’re having trouble you can contact our helpful team',
          color: 'orange',
          url: '/hc/en-us/requests/new',
        }
      ],
    },
    faqBlock: {
      articles: [
        {
          title: 'What are token warnings?',
          description: 'We at Uniswap Labs want to help you safely browse and discover tokens and make informed decisions about them. That’s why we introduced Token Warnings.',
          url: '/hc/en-us/articles/8723118437133-What-are-token-warnings',
        },
        {
          title: 'What is a network cost?',
          description: 'The specific token required to cover these fees varies depending on the network being used.',
          url: '/hc/en-us/articles/8370337377805-What-is-a-network-cost',
        },
        {
          title: 'What is an approval transaction?',
          description: 'The first time you swap or add liquidity, you have to approve the token to be swapped. This gives the Uniswap Protocol permission to swap that token from your wallet.',
          url: '/hc/en-us/articles/8120520483085-What-is-an-approval-transaction',
        },
        {
          title: 'Networks on Uniswap',
          description: 'The Uniswap interfaces support the following Networks:',
          url: '/hc/en-us/articles/14569415293325-Networks-on-Uniswap',
        },
        {
          title: 'Why did my transaction fail?',
          description: 'There are several reasons why a transaction can fail when using Uniswap.',
          url: '/hc/en-us/articles/8643975058829-Why-did-my-transaction-fail',
        },
        {
          title: 'How to swap tokens with the Uniswap Web app',
          description: 'To swap tokens on Uniswap follow these steps:',
          url: '/hc/en-us/articles/8370549680909-How-to-swap-tokens-with-the-Uniswap-Web-app',
        },
      ]
    },
    guidesBlock: {
      promotedArticles: {{json promoted_articles}}
    },
    topicsBlock: {
      categories: {{json categories}}
    },
    connectBlock: {
      title: 'Connect with us',
      supportTitle: 'Get Support',
      supportButton: {
        url: 'https://help.uniswap.org/',
        name: 'Help center',
      },
      socialTitle: 'Insights and news from the team',
      socialButton: {
        url: 'https://blog.uniswap.org/',
        name: 'Help center',
      },
      newsletterTitle: 'Sign up for research and updates from the Uniswap Labs team',
    },
  }

  renderHomepage(settings, homepageData, container);
  container.prepend(searchBarPlaceholder);
</script>

<script type="module">
  import { renderSideNav, renderMobileMenuNav, sideNav } from "side-nav";

  const container = document.getElementById("new-side-nav");

  const settings = {{json settings}};

  const sideNavData = await sideNav.get();

  // Make sure arguments are correctly typed. 
  renderSideNav(settings, sideNavData, {}, container);

  // Add mobile nav
  const addMobileNav = (sideNavData) => {

    const container = document.getElementById("new-mobile-nav");

    const settings = {{json settings}};

    // Make sure arguments are correctly typed. 
    renderMobileMenuNav(settings, sideNavData, {}, container);
  }

  const mobileMenuButton = document.getElementById("mobile-menu-button");
    mobileMenuButton.addEventListener("click", (e) => {
    // add setTimeout to ensure the mobile nav is added after mobile menu appears on DOM first
    setTimeout(() => addMobileNav(sideNavData), 100);
  });
</script>